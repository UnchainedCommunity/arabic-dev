[
  {
    "model": "stemmers_comparer.author",
    "pk": 1,
    "fields": {
      "first_name": "Mohamed",
      "last_name": "Boudchiche",
      "github_account_link": null,
      "website": "https://www.researchgate.net/profile/Mohamed_Boudchiche2"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 2,
    "fields": {
      "first_name": "Azzeddine",
      "last_name": "Mazroui",
      "github_account_link": null,
      "website": "https://www.researchgate.net/profile/Azzeddine_Mazroui3"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 3,
    "fields": {
      "first_name": "Mohamad",
      "last_name": "Ould Abdallahi Ould Bebah",
      "github_account_link": null,
      "website": "https://www.researchgate.net/profile/Mohamad_Bebah"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 4,
    "fields": {
      "first_name": "Abdelhak",
      "last_name": "Lakhouaja",
      "github_account_link": null,
      "website": "https://www.researchgate.net/profile/Abdelhak_Lakhouaja"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 5,
    "fields": {
      "first_name": "Assem",
      "last_name": "Chelli",
      "github_account_link": "https://github.com/assem-ch/",
      "website": "https://www.assemchelli.com/"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 6,
    "fields": {
      "first_name": "Mohamed",
      "last_name": "Eldesouki",
      "github_account_link": "https://github.com/disooqi",
      "website": "https://mohamed-eldesouki.com/"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 7,
    "fields": {
      "first_name": "Kareem",
      "last_name": "Darwish",
      "github_account_link": null,
      "website": "https://scinapse.io/authors/2064042002"
    }
  },
  {
    "model": "stemmers_comparer.author",
    "pk": 8,
    "fields": {
      "first_name": "Hamdy",
      "last_name": "Mubarak",
      "github_account_link": null,
      "website": "https://scinapse.io/authors/2251487896"
    }
  },
  {
    "model": "stemmers_comparer.programminglanguage",
    "pk": "C",
    "fields": {
      "website": "https://www.cprogramming.com/"
    }
  },
  {
    "model": "stemmers_comparer.programminglanguage",
    "pk": "C++",
    "fields": {
      "website": "http://www.cplusplus.com/"
    }
  },
  {
    "model": "stemmers_comparer.programminglanguage",
    "pk": "Java",
    "fields": {
      "website": "https://www.java.com/"
    }
  },
  {
    "model": "stemmers_comparer.programminglanguage",
    "pk": "JavaScript",
    "fields": {
      "website": "https://www.javascript.com/"
    }
  },
  {
    "model": "stemmers_comparer.programminglanguage",
    "pk": "Python",
    "fields": {
      "website": "https://www.python.org/"
    }
  },
  {
    "model": "stemmers_comparer.requirement",
    "pk": 1,
    "fields": {
      "name": "requests package",
      "url": "https://pypi.org/project/requests/"
    }
  },
  {
    "model": "stemmers_comparer.requirement",
    "pk": 2,
    "fields": {
      "name": "beautifulsoup4 package",
      "url": "https://pypi.org/project/beautifulsoup4/"
    }
  },
  {
    "model": "stemmers_comparer.requirement",
    "pk": 3,
    "fields": {
      "name": "Java Runtime Envionment (JRE)",
      "url": "https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html"
    }
  },
  {
    "model": "stemmers_comparer.requirement",
    "pk": 4,
    "fields": {
      "name": "snowball Stemmer",
      "url": "https://www.arabicstemmer.com/python/"
    }
  },
  {
    "model": "stemmers_comparer.requirement",
    "pk": 5,
    "fields": {
      "name": "nltk package",
      "url": "https://pypi.org/project/nltk/"
    }
  },
  {
    "model": "stemmers_comparer.requirement",
    "pk": 6,
    "fields": {
      "name": "Tashaphyne package",
      "url": "https://pypi.org/project/Tashaphyne/"
    }
  },
  {
    "model": "stemmers_comparer.stemmer",
    "pk": "alkhalil_morph_sys_stemmer",
    "fields": {
      "display_name": "Al Khalil Morpho Sys Stemmer",
      "is_enabled": true,
      "license": "CC-BY-NC-SA",
      "description": "Alkhalil Morpho Sys is a morphosyntactic parser of Arabic words. The system can process non vocalized texts as well as partially or totally vocalized ones. Our approach is based on modelling a very large set of Arabic morphological rules, and also on integrating linguistic resources, such as the root database, vocalized patterns associated with roots, and proclitic and enclitic tables. As an output of the analysis, we have a highly informative table mainly containing vocalization of the stem, its grammatical category, its possible roots associated with corresponding patterns, proclitics and enclitics.",
      "documentation_link": "http://oujda-nlp-team.net/en/programms/alkhalil-morphology-2-en/?lang=en",
      "download_link": "http://resources.oujda-nlp-team.net:9090/home#data1",
      "how_to_use": "# -*- coding: utf-8 -*-\r\nimport alkhalilMorphoSysStemmer\r\n\r\n# unicode input\r\nstring = '\u0645\u0643\u062a\u0628\u0629 \u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0639\u0631\u0628\u064a\u0629  \u0648\u062a\u062c\u0630\u064a\u0639\u0647\u0627'\r\n# return an array\r\nstems_list = alkhalilMorphoSysStemmer.stem(string)",
      "count": 0,
      "average": "0.00000",
      "authors": [
        1,
        2,
        3,
        4
      ],
      "programming_languages": [
        "Java"
      ],
      "requirements": [
        3
      ],
      "features": []
    }
  },
  {
    "model": "stemmers_comparer.stemmer",
    "pk": "arabic_processing_cog_stemmer",
    "fields": {
      "display_name": "Arabic Processing Cog",
      "is_enabled": true,
      "license": "MIT License",
      "description": "A Python package that do stemming, tokenization, sentence breaking, segmentation, normalization, POS tagging for Arabic language.",
      "documentation_link": "https://github.com/disooqi/ArabicProcessingCog",
      "download_link": "https://github.com/disooqi/ArabicProcessingCog",
      "how_to_use": "from arabic_processing_cog.tokenization import ArabicTokenizer as arabic_tokenizer\r\nfrom arabic_processing_cog.stemming import Light10stemmer as arabic_processing_cog_stemmer\r\n\r\nstring = '\u0645\u0643\u062a\u0628\u0629 \u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0639\u0631\u0628\u064a\u0629  \u0648\u062a\u062c\u0630\u064a\u0639\u0647\u0627'\r\n  for token in arabic_tokenizer.tokenize(string):\r\n    stem_word = arabic_processing_cog_stemmer.stem_token(token)\r\n    print(stem_word)",
      "count": 0,
      "average": "0.00000",
      "authors": [
        6
      ],
      "programming_languages": [
        "Python"
      ],
      "requirements": [],
      "features": []
    }
  },
  {
    "model": "stemmers_comparer.stemmer",
    "pk": "assems_arabic_light_stemmer",
    "fields": {
      "display_name": "Assem's Arabic Light Stemmer",
      "is_enabled": true,
      "license": "BSD License",
      "description": "Welcome to the Arabic Light Stemming Algorithm made for Snowball, it's fast and can be generated in many programming languages (through Snowball).",
      "documentation_link": "https://arabicstemmer.com/",
      "download_link": "https://arabicstemmer.com/",
      "how_to_use": "from snowballstemmer import stemmer\r\n\r\nar_stemmer = stemmer(\"arabic\")\r\nar_stemmer.stemWord(u\"\u0641\u0633\u0645\u064a\u062a\u0645\u0648\u0647\u0627\")",
      "count": 0,
      "average": "0.00000",
      "authors": [
        5
      ],
      "programming_languages": [
        "C",
        "C++",
        "Java",
        "JavaScript",
        "Python"
      ],
      "requirements": [
        4
      ],
      "features": []
    }
  },
  {
    "model": "stemmers_comparer.stemmer",
    "pk": "farasa_stemmer",
    "fields": {
      "display_name": "Farasa",
      "is_enabled": true,
      "license": null,
      "description": "Farasa (which means \u201cinsight\u201d in Arabic), is a fast and accurate text processing toolkit for Arabic text. Farasa consists of the segmentation/tokenization module, POS tagger, Arabic text Diacritizer, and Dependency Parser. Farasa segmentation/tokenization module is based on SVM-rank using linear kernels that uses a variety of features and lexicons to rank possible segmentations of a word. The features include: likelihoods of stems, prefixes, suffixes, their combinations; presence in lexicons containing valid stems or named entities; and underlying stem templates.",
      "documentation_link": "http://qatsdemo.cloudapp.net/farasa/",
      "download_link": "http://qatsdemo.cloudapp.net/farasa/",
      "how_to_use": "# -*- coding: utf-8 -*-\r\n\r\nfrom farasaStemmer import FarasaStemmer as farasa_stemmer\r\n\r\n# unicode input\r\nstring = u'\u0645\u0643\u062a\u0628\u0629 \u0644\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0643\u0644\u0645\u0627\u062a \u0627\u0644\u0639\u0631\u0628\u064a\u0629  \u0648\u062a\u062c\u0630\u064a\u0639\u0647\u0627'\r\n# return an array\r\nstems_list = farasa_stemmer.stem(farasa_stemmer, string)",
      "count": 0,
      "average": "0.00000",
      "authors": [
        7,
        8
      ],
      "programming_languages": [
        "Java"
      ],
      "requirements": [
        3
      ],
      "features": []
    }
  }
]